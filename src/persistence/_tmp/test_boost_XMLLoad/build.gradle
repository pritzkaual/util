apply plugin: 'cpp'

description 'Example project: test_boost_XMLLoad of Ecore use '

File appendDebugSuffix(File binaryFile) {
  int extensionSeparatorIndex = binaryFile.path.lastIndexOf('.')
  return new File(binaryFile.path.substring(0, extensionSeparatorIndex) + "d" + binaryFile.path.substring(extensionSeparatorIndex))
}

task deliverApplication(dependsOn: ['deliverApplicationDebugExecutable']) {
	description 'deliver debug and release executable to application folder (%MDE4CPP_HOME%/application/bin)'
}

task deliverApplicationDebugExecutable(type: Copy) {
	description 'deliver types debug libary to %MDE4CPP_HOME%/application/bin'
	from "build/exe/test_boost_XMLLoad"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "test_boost_XMLLoadd.exe"
}

task deliverApplicationReleaseExecutable(type: Copy) {
	description 'deliver types release libary to %MDE4CPP_HOME%/application/bin'
	from "build/exe/test_boost_XMLLoad/release"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "test_boost_XMLLoad.exe"
}


model {
    toolChains {
    	 gcc(Gcc) {
    	 	"g++"
    	 }
    }
	
    buildTypes {
        debug 
    }
	repositories {
        libs(PrebuiltLibraries) {
			[ "ecore", "types"].each {
				delegate."$it" {
					def libraryName = "${name}"
					headers.srcDir System.getenv('MDE4CPP_HOME')+"/application/include/${libraryName}"
					binaries.withType(SharedLibraryBinary) {
						if(buildType == buildTypes.debug) {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}d.dll")
						} else {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.dll")						
						}
					}
				}	
			}         
		}
	}	
  repositories {
        libs(PrebuiltLibraries) {
			[ "libxerces-c"].each {
				delegate."$it" {
					def libraryName = "${name}"
					headers.srcDir "C:/Tools/MinGW/xerces-c-3.1.4/src"
					binaries.withType(SharedLibraryBinary) {
						if(buildType == buildTypes.debug) {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.a")
						} else {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.a")						
						}
					}
				}	
			}         
		}
	}

    components {
        test_boost_XMLLoad(NativeExecutableSpec)
        {
        	sources {
                cpp {
                    source {
                        srcDirs "src/" 
                        srcDirs "src/myTestXerces" 
                        srcDirs "src/persistence" 
                        srcDirs "src/persistence/type" 
                        srcDirs "src/persistence/xerces" 
                        
						include	"main_myTestBoostXMLLoad.cpp"
            
						include	"DOMPrintFilter.cpp"
						include	"DOMPrintErrorHandler.cpp"
						include	"DOMTreeErrorReporter.cpp"
            include	"XStr.cpp"

						include	"TestModel.cpp"
            
						include	"MyTestXerces.cpp"
            
						include	"Persistence.cpp"
						include	"Load.cpp"
						include	"Save.cpp"
						include	"XMLLoad.cpp"
						include	"XMLSave.cpp"
						include	"Handler.cpp"
						include	"ExtendedMetaData.cpp"
						include	"Option.cpp"
                    }
					exportedHeaders {
                        srcDirs ".", System.getenv('MDE4CPP_HOME')+"/application/include", System.getenv('MDE4CPP_HOME')+"/application/include/abstractDataTypes"
                        include "**/*.hpp"
                        include "**/*.h"
                        
                    }
					lib library: "ecore"
					lib library: "types"
					lib library: "libxerces-c"
                }
            }
        }
		
		withType(NativeComponentSpec) {
			binaries.withType(NativeBinarySpec) {
				if (it instanceof NativeExecutableBinarySpec) {
					if(buildType == buildTypes.debug) {
						it.getExecutable().setFile(appendDebugSuffix(it.getExecutable().getFile()))						
					}
				}
			}
        }
    }
	    
    binaries {
	
        all {
        	linker.args '-fopenmp'
        	cppCompiler.args '-std=c++1y','-Wall', '-Wno-overloaded-virtual', '-Wdeprecated-declarations', '-pipe', '-fmax-errors=5', '-fopenmp'
			if (buildType == buildTypes.debug) {
				cppCompiler.args '-g'
				
			}
			else {
				cppCompiler.args '-O3'
			}
        }
    }
}
build.finalizedBy(deliverApplication)


task compiletest_boost_XMLLoad(dependsOn: 'build') {
	group 'Examples'
	description 'compile test_boost_XMLLoad example'
}
